#!/usr/bin/env bash
set -eou pipefail

function what-where(){
  header=$(df -h | head -1)
  rootfs=$(df -h | grep '/$')
  if [[ $(df -h | grep -cE '/dev/sd(a|b)') -eq 0 ]]; then
    ssd="No SSD found!"
  else ssd=$(df -h | grep -E '/dev/sd(a|b)'); fi

  report=""
  report+=$header$'\n'
  report+=$rootfs$'\n'
  report+=$ssd$''

  echo "$report"
}

function take-flash-put-ssd(){
  folders_in_mnt=$(ls -l /mnt | wc -l )
  if [ $folders_in_mnt -eq 1 ]; then
    sudo mount /dev/sda1 "/mnt"     # will exit 1 if unsuccessful
    sleep 2
    set +ue
    backup_dev=$(df -h | grep -E 'dev/sd(a|b)' | awk '{print $1}')
    set -ue
  fi;

  if [ -z $backup_dev ]; then
    echo "No drive attached!"; exit 1;
  fi;

  take-x-put-y "/" "/mnt"
}

function take-ssd-put-flash(){
  take-x-put-y "/mnt" "/"
}

function take-x-put-y(){
  from=$1
  to=$2

  echo "reminder, don't overwrite /boot or /etc/fstab"
  echo "rsync -a = archive, want recursion and want to preserve everything"
  echo "rsync -u = skip any files which exist on destination and have time that is newer"
  echo "rsync -x = avoid crossing a filesystem boundary"

  sudo rsync -aux \
    --exclude="$to" \
    --exclude="/var/lib/pacman/local" \
    --exclude=/boot \
    --exclude=/etc/fstab \
    "$from" "$to"
}

function make-report(){
  report=""
  #declare -a vars=($header $rootfs $ssd) && make-report ${vars[@]}
  lines="$@"
  for line in "${lines[@]::${#lines[@]}-1}"; do
    echo "line is: $line"
    report+=$line$'\n'
  done
  echo "$report"
}

